package api

import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/CeruleanSong/gobox-server/src/config"
	"github.com/CeruleanSong/gobox-server/src/database"
	"github.com/CeruleanSong/gobox-server/src/model"
	"github.com/CeruleanSong/gobox-server/src/util"
	"github.com/dgrijalva/jwt-go"
	"github.com/labstack/echo/v4"
	"github.com/valyala/fasthttp"
	"go.mongodb.org/mongo-driver/bson"
)

// AuthRegister a
func AuthRegister() echo.HandlerFunc {
	return func(c echo.Context) (err error) {

		var email string = c.FormValue("email")
		var password string = c.FormValue("password")

		if email == "" || password == "" {
			return c.JSON(fasthttp.StatusOK, util.ErrorINVALIDAUTH)
		}

		passwordSlice := []byte(password)
		hash := util.Hash(passwordSlice)

		db := database.Database()
		client, err := db.Get()
		if err != nil {
			return err
		}

		token := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{
			"email": email,
			"nbf":   time.Now().Unix(),
		})

		key := []byte(config.SECRET)
		tokenString, err := token.SignedString(key)
		if err != nil {
			return err
		}

		collection := client.Database("gobox").Collection("user")
		ctx, _ := context.WithTimeout(context.Background(), 5*time.Second)
		_, err = collection.InsertOne(ctx, &model.User{EMAIL: email, PASSWORD: hash})
		if err != nil {
			return c.JSON(fasthttp.StatusConflict, util.ErrorDUPLICATE)
		}

		return c.JSON(fasthttp.StatusOK, tokenString)
	}
}

// AuthLogin a
func AuthLogin() echo.HandlerFunc {
	return func(c echo.Context) (err error) {

		var email string = c.FormValue("email")
		var password string = c.FormValue("password")

		if email == "" || password == "" {
			return c.JSON(fasthttp.StatusOK, util.ErrorINVALIDAUTH)
		}

		passwordSlice := []byte(password)

		db := database.Database()
		client, err := db.Get()
		if err != nil {
			return err
		}

		var result model.User

		collection := client.Database("gobox").Collection("user")
		ctx, _ := context.WithTimeout(context.Background(), 5*time.Second)

		filter := bson.M{"_id": email}

		res := collection.FindOne(ctx, &filter)

		res.Decode(&result)
		if err != nil {
			return err
		}

		if util.Valid(result.PASSWORD, passwordSlice) {
			token := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{
				"email": email,
				"nbf":   time.Now().Unix(),
			})

			key := []byte(config.SECRET)
			tokenString, err := token.SignedString(key)
			if err != nil {
				return err
			}
			return c.JSON(fasthttp.StatusOK, tokenString)
		}

		return c.JSON(fasthttp.StatusOK, util.ErrorINVALIDAUTH)
	}
}

// AuthVerify a
func AuthVerify() echo.HandlerFunc {
	return func(c echo.Context) (err error) {
		var header string = c.Request().Header.Get("Authorization")
		var email string = c.FormValue("email")
		var password string = c.FormValue("password")
		passwordSlice := []byte(password)

		var authorization = strings.Split(header, " ")

		token, err := jwt.Parse(authorization[1], func(token *jwt.Token) (interface{}, error) {
			// Don't forget to validate the alg is what you expect:
			if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
				return nil, fmt.Errorf("Unexpected signing method: %v", token.Header["alg"])
			}

			// hmacSampleSecret is a []byte containing your secret, e.g. []byte("my_secret_key")
			return config.SECRET, nil
		})

		if claims, ok := token.Claims.(jwt.MapClaims); ok && token.Valid {
			fmt.Println(claims["foo"], claims["nbf"])
			db := database.Database()
			client, err := db.Get()
			if err != nil {
				return err
			}

			var result model.User

			collection := client.Database("gobox").Collection("user")
			ctx, _ := context.WithTimeout(context.Background(), 5*time.Second)

			filter := bson.M{"_id": email}

			res := collection.FindOne(ctx, &filter)

			res.Decode(&result)
			if err != nil {
				return err
			}

			if util.Valid(result.PASSWORD, passwordSlice) {
				// return c.Echo().Use(middleware.JWTConfig())
				return c.JSON(fasthttp.StatusOK, util.ErrorINVALIDAUTH)
			}

		} else {
			fmt.Println(err)
		}

		return c.JSON(fasthttp.StatusOK, util.ErrorINVALIDAUTH)
	}
}
